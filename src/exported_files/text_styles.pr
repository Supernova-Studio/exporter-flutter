import 'package:flutter/material.dart';

class AppTextStyles {

{[ let brand = ds.currentBrand() /]}
{[ const typographyTokensTree = ds.tokenGroupTreeByType("Typography", brand.id) /]}
{[ traverse typographyTokensTree property subgroups into typographyTokenGroup ]}
  {[ let fullTokenGroupPath = createFullTokenGroupPath(typographyTokenGroup) /]}
  {[ const typographyTokenInGroups = ds.tokensByGroupId(typographyTokenGroup.id) /]}
  {[ for typographyToken in typographyTokenInGroups ]}
  {[ const fullTokenPath = arrayConcat(fullTokenGroupPath, typographyToken.name) /]}
  {[ const fullTokenName = arrayJoin(fullTokenPath, " ").camelcased(false) /]}
  {[ let fontStyle = "normal" /]}
  {[ if ds.isFontItalic(typographyToken.value.font) ]}
    {[ set fontStyle = "italic" /]}
  {[/]}
  {[ let decoration = "none" /]}
  {[ switch typographyToken.value.textDecoration ]}
    {[ case "None" ]}
      {[ set decoration = "none" /]}
    {[ case "Underline" ]}
      {[ set decoration = "underline" /]}
    {[ case "Strikethrough" ]}
      {[ set decoration = "lineThrough" /]}
  {[/]}
  {[ let letterSpacing = typographyToken.value.letterSpacing.measure /]}
  {[ const fontSize = typographyToken.value.fontSize.measure /]}
  {[ if (typographyToken.value.letterSpacing.unit == "Percent") ]}
    {[ set letterSpacing = (fontSize / 100 * letterSpacing) /]}
  {[/]}
  {[ let lineHeight = "null" /]}
  {[ if (typographyToken.value.lineHeight != null) ]}
    {[ if (typographyToken.value.lineHeight.unit == "Pixels") ]}
      {[ lineHeight = (typographyToken.value.lineHeight.measure / fontSize) /]}
    {[ else if (typographyToken.value.lineHeight.unit == "Percent") ]}
      {[ lineHeight = (typographyToken.value.lineHeight.measure / 100) /]}
    {[/]}
  {[/]}
  {[ if (typographyToken.description && typographyToken.description !== "") ]}
{{ createDocumentationComment(typographyToken.description, "  ") }}
  {[/]}
  static const {{ fullTokenName }} = TextStyle(
    fontFamily: "{{ typographyToken.value.font.family }}",
    fontWeight: FontWeight.w{{ ds.fontWeight(typographyToken.value.font) }},
    fontStyle: FontStyle.{{ fontStyle }},
    fontSize: {[ inject "export_measure_value" context typographyToken.value.fontSize /]},
    decoration: TextDecoration.{{ decoration }},
    letterSpacing: {{ letterSpacing.toString() }},
    {[ if (lineHeight != "null") ]}
    height: {{ lineHeight.toString() }},
    {[/]}
    leadingDistribution: TextLeadingDistribution.even,
  );

  {[/]}
{[/]}
  AppTextStyles._();
}
